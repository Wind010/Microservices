
using System;
using System.Collections.Generic;

namespace Services.User.Data.Repository.Tests.Integration
{
    using Models.DTO;

    using AutoFixture;

    public class DtoGenerator
    {
        public IFixture Fixture { get; private set; }


        public DtoGenerator()
        {
            Fixture = new Fixture();

            // TODO:  Allow autofixture to generate random data.  Don't like the ICustomization approach.
            //var autoGeneratedText = fixture.Create<string>();

            InitializeUserFixture();
            InitializeAddressFixture();
            InitializeContactFixture();
            InitializePreferenceFixture();
            InitializeNotes();
        }

        
        //public IFixture Create<T>()
        //{
        //    IFixture fixture = = new Fixture();



        //    T passedInType = default(T);
        //    List<T> list = null;

        //    //if (typeof(T).GetInterface("ICollection") != null)
        //    //{
        //    //    Type collectionType = typeof(T).GetGenericArguments()[0];
        //    //    list = new List<T>();

        //    //    MethodInfo method = this.GetType().GetMethod("GenerateList");
        //    //    MethodInfo generic = method.MakeGenericMethod(collectionType);

        //    //    passedInType = (T)Convert.ChangeType(generic.Invoke(this, null), typeof(T));

        //    //}
        //    //else
        //    //{
        //    //    passedInType = Create<T>(typeof(T));
        //    //}

        //    passedInType = Create<T>(typeof(T));


        //    if (list != null)
        //    {
        //        list.Add(passedInType);
        //        passedInType = (T)Convert.ChangeType(list, typeof(T));
        //    }

        //    return passedInType;
        //}


        //private T Create<T>(Type t)
        //{
        //    T passedInType = default(T);

        //    if (t == typeof(User))
        //    {
        //        passedInType = (T)Convert.ChangeType(GenerateUser(), typeof(T));
        //    }

        //    if (t == typeof(Address))
        //    {
        //        passedInType = (T)Convert.ChangeType(GenerateAddress(), typeof(T));
        //    }

        //    if (t == typeof(List<Address>))
        //    {
        //        passedInType = (T)Convert.ChangeType(GenerateAddress(), typeof(T));
        //    }

        //    if (t == typeof(Contact))
        //    {
        //        passedInType = (T)Convert.ChangeType(GenerateContact(), typeof(T));
        //    }

        //    if (t == typeof(Preference))
        //    {
        //        passedInType = (T)Convert.ChangeType(GeneratePreference(), typeof(T));
        //    }

        //    if (t == typeof(Note))
        //    {
        //        passedInType = (T)Convert.ChangeType(GenerateNote(), typeof(T));
        //    }

        //    return passedInType;
        //}


        //private List<T> GenerateList<T>(Type t)
        //{
        //    var list = new List<T>();
        //    T s = Create<T>(typeof(T));
        //    list.Add(s);
        //    return list;
        //}


        private User GenerateUser()
        {
            var User = new User();
            User.UserId = new Guid();
            User.TenantId = 1;
            User.FirstName = "Jeff";
            User.MiddleName = "J";
            User.LastName = "Tong";
            User.Title = "Mr.";
            User.Created = DateTime.Now;

            return User;
        }

        private Address GenerateAddress()
        {
            var address = new Address();
            address.AddressLine1 = nameof(Address.AddressLine1);
            address.AddressLine2 = nameof(Address.AddressLine2);
            address.AddressLine3 = nameof(Address.AddressLine3);
            address.City = "Bellevue";
            address.StateProvinceId = 54;
            address.ZipCode = "98007";
            address.Created = DateTime.Now;

            return address;
        }

        public Contact GenerateContact()
        {
            var contact = new Contact();
            contact.ContactTypeId = 1;
            contact.Name = "Primary";
            contact.Description = nameof(Contact.Description);
            contact.Value = "555-555-5555";

            return contact;
        }

        private Preference GeneratePreference()
        {
            return new Preference()
            {
                Name = "FinerThings",
                Details = "User McUserFace prefers the finer things."
            };
        }

        private Note GenerateNote()
        {
            return new Note()
            {
                Notes = @"Lorem ipsum dolor sit amet, consectetur adipiscing elit,
                sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut 
                enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip 
                ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit 
                esse cillum dolore eu fugiat nulla pariatur.Excepteur sint occaecat cupidatat non proident, 
                sunt in culpa qui officia deserunt mollit anim id est laborum."
            };
        }


        private void InitializeUserFixture()
        {
            Fixture.Customize<User>(composer =>
                composer.With(x => x.Id, 0)
                .With(x => x.UserId, new Guid())
                .With(x => x.TenantId, 1)
                .With(x => x.FirstName, "Jeff")
                .With(x => x.MiddleName, "J")
                .With(x => x.LastName, "Tong")
                .With(x => x.Title, "Mr.")
                .With(x => x.Created, DateTime.Now)
                .With(x => x.Modified, null)
            );
        }

        private void InitializeAddressFixture()
        {
            Fixture.Customize<Address>(composer =>
                composer.With(x => x.Id, 0)
                .With(x => x.UserId, 0)
                .With(x => x.UserId, 0)
                .With(x => x.AddressLine2, nameof(Address.AddressLine2))
                .With(x => x.AddressLine2, nameof(Address.AddressLine2))
                .With(x => x.AddressLine2, nameof(Address.AddressLine2))
                .With(x => x.City, nameof(Address.City))
                .With(x => x.StateProvinceId, 54)
                .With(x => x.ZipCode, "98042")
                .With(x => x.Created, DateTime.Now)
                .With(x => x.Modified, null)
            );
        }

        private void InitializeContactFixture()
        {
            Fixture.Customize<Contact>(composer =>
                composer.With(x => x.Id, 0)
                .With(x => x.ContactTypeId, 1)
                .With(x => x.UserId, 0)
                .With(x => x.Name, nameof(Contact.Name))
                .With(x => x.Description, nameof(Contact.Description))
                .With(x => x.Value, nameof(Contact.Value))
            );
        }

        private void InitializePreferenceFixture()
        {
            Fixture.Customize<Preference>(composer =>
                composer.With(x => x.Id, 0)
                .With(x => x.UserId, 0)
                .With(x => x.PreferenceTypeId, 1)
                .With(x => x.Name, "FinerThings")
                .With(x => x.Details, "User McUserFace prefers the finer things.")
            );
        }


        private void  InitializeNotes()
        {
            string note = @"Lorem ipsum dolor sit amet, consectetur adipiscing elit,
            sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut 
            enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip 
            ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit 
            esse cillum dolore eu fugiat nulla pariatur.Excepteur sint occaecat cupidatat non proident, 
            sunt in culpa qui officia deserunt mollit anim id est laborum.";

            Fixture.Customize<Note>(composer =>
                composer.With(x => x.Id, 0)
                .With(x => x.UserId, 0)
                .With(x => x.Notes, note)
            );
        }
    }
}
