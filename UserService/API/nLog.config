<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Warn"
      internalLogFile="c:\temp\internal.txt">


    <targets>

      <target
        name="database"
        xsi:type="Database"
        connectionStringName="UserProfielDB"
        connectionString="Server==TongJ-SQL01;Initial Catalog=UserProfile;Persist Security Info=False;Integrated Security=sspi;MultipleActiveResultSets=True;Connection Timeout=5;"
        >
        <!--
        Remarks:
          The appsetting layouts require the NLog.Extended assembly.
          The aspnet-* layouts require the NLog.Web assembly.
          The Application value is determined by an AppName appSetting in Web.config.
          The "NLogDb" connection string determines the database that NLog write to.
          The create dbo.Log script in the comment below must be manually executed.
        -->

        <commandText>
          insert into dbo.Log (
          Application, Logged, Level, Message,
          Username,
          ServerName, Port, Url, Https,
          ServerAddress, RemoteAddress,
          Logger, CallSite, Exception, ClientId
          ) values (
          @application, @logged, @level, @message,
          @username,
          @serverName, @port, @url, @https,
          @serverAddress, @remoteAddress,
          @logger, @callSite, @exception,
          CASE WHEN @clientId = '' THEN NULL ELSE CONVERT(uniqueidentifier, @clientId) END
          );
        </commandText>

        <parameter name="@application" layout="${appsetting:name=AppName:default=Unknown\: set AppName in appSettings}" />
        <parameter name="@logged" layout="${date}" />
        <parameter name="@level" layout="${level}" />
        <parameter name="@message" layout="${message}" />

        <parameter name="@username" layout="${identity}" />

        <parameter name="@serverName" layout="${event-properties:item=MachineName}" />
        <parameter name="@port" layout="${aspnet-request:serverVariable=SERVER_PORT}" />
        <parameter name="@url" layout="${aspnet-request:serverVariable=HTTP_URL}" />
        <parameter name="@https" layout="${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}" />

        <parameter name="@serverAddress" layout="${aspnet-request:serverVariable=LOCAL_ADDR}" />
        <parameter name="@remoteAddress" layout="${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}" />

        <parameter name="@logger" layout="${logger}" />
        <parameter name="@callSite" layout="${callsite}" />
        <parameter name="@exception" layout="${exception:tostring}" />
        <parameter name="@clientId" layout="${event-properties:item=ClientId}" />
      </target>

      <target name="coloredConsole" xsi:type="ColoredConsole" layout="${longdate}:  ${message}" />
    </targets>
    <rules>
      <logger name="*" minLevel="Debug" writeTo="coloredConsole" />
      <logger name="*" minLevel="Debug" writeTo="database" />
    </rules>
</nlog>

